{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to nf-test! nf-test is a simple test framework for Nextflow pipelines. Getting Started Installation Source Test your pipeline Let's start with a simple example to test the Hello World Nextflow pipeline. To run it, copy/paste the code into a text file (e.g. hello-world.test ) and run it with nf-test test hello-world.test . nextflow_pipeline { name \"Test Hello World\" script \"nextflow-io/hello\" test ( \"hello world example should start 4 processes\" ) { expect { with ( workflow ){ assert success //analyze Nextflow trace file assert trace . tasks (). size () == 4 //Verify if strings have been written to stdout object assert \"Ciao world!\" in stdout assert \"Bonjour world!\" in stdout assert \"Hello world!\" in stdout assert \"Hola world!\" in stdout } } } } Test your modules In the nf-test script below we add some basic checks to a module of a recently published pipeline . nextflow_process { name \"Test Process SALMON_INDEX\" script \"modules/local/salmon_index.nf\" process \"SALMON_INDEX\" test ( \"Should create channel index files\" ) { when { process { \"\"\" input[0] = file(\"test_data/transcriptome.fa\") \"\"\" } } then { //check if test case succeeded assert process . success //analyze trace file assert process . trace . tasks (). size () == 1 with ( process . out ) { // check if emitted output has been created assert index . size () == 1 // count amount of created files assert path ( index . get ( 0 )). list (). size () == 16 // parse info.json file def info = path ( index . get ( 0 )+ '/info.json' ). json assert info . num_kmers == 375730 assert info . seq_length == 443050 //verify md5 checksum assert path ( index . get ( 0 )+ '/info.json' ). md5 == \"80831602e2ac825e3e63ba9df5d23505\" } } } }","title":"Home"},{"location":"#welcome-to-nf-test","text":"nf-test is a simple test framework for Nextflow pipelines. Getting Started Installation Source","title":"Welcome to nf-test!"},{"location":"#test-your-pipeline","text":"Let's start with a simple example to test the Hello World Nextflow pipeline. To run it, copy/paste the code into a text file (e.g. hello-world.test ) and run it with nf-test test hello-world.test . nextflow_pipeline { name \"Test Hello World\" script \"nextflow-io/hello\" test ( \"hello world example should start 4 processes\" ) { expect { with ( workflow ){ assert success //analyze Nextflow trace file assert trace . tasks (). size () == 4 //Verify if strings have been written to stdout object assert \"Ciao world!\" in stdout assert \"Bonjour world!\" in stdout assert \"Hello world!\" in stdout assert \"Hola world!\" in stdout } } } }","title":"Test your pipeline"},{"location":"#test-your-modules","text":"In the nf-test script below we add some basic checks to a module of a recently published pipeline . nextflow_process { name \"Test Process SALMON_INDEX\" script \"modules/local/salmon_index.nf\" process \"SALMON_INDEX\" test ( \"Should create channel index files\" ) { when { process { \"\"\" input[0] = file(\"test_data/transcriptome.fa\") \"\"\" } } then { //check if test case succeeded assert process . success //analyze trace file assert process . trace . tasks (). size () == 1 with ( process . out ) { // check if emitted output has been created assert index . size () == 1 // count amount of created files assert path ( index . get ( 0 )). list (). size () == 16 // parse info.json file def info = path ( index . get ( 0 )+ '/info.json' ). json assert info . num_kmers == 375730 assert info . seq_length == 443050 //verify md5 checksum assert path ( index . get ( 0 )+ '/info.json' ). md5 == \"80831602e2ac825e3e63ba9df5d23505\" } } } }","title":"Test your modules"},{"location":"configuration/","text":"Configuration Setup test profile To run your test using a specific Netxflow profile, you can use the --profile argument on the command line or define a default profile in nf-test.config nf-test.config This config file contains settings for nf-test. config { // location where nftest should save test scripts testsDir \"tests\" // location of a nextflow.config file specific for executing tests configFile \"tests/nextflow.config\" // run all test with the defined docker profile from the main nextflow.config profile \"docker\" } tests/nextflow.config This nextflow.config file is used to execute tests. This is a good place to set default params for all your tests. Example number of threads: params { // run all tests with 1 threads threads = 1 }","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#setup-test-profile","text":"To run your test using a specific Netxflow profile, you can use the --profile argument on the command line or define a default profile in nf-test.config","title":"Setup test profile"},{"location":"configuration/#nf-testconfig","text":"This config file contains settings for nf-test. config { // location where nftest should save test scripts testsDir \"tests\" // location of a nextflow.config file specific for executing tests configFile \"tests/nextflow.config\" // run all test with the defined docker profile from the main nextflow.config profile \"docker\" }","title":"nf-test.config"},{"location":"configuration/#testsnextflowconfig","text":"This nextflow.config file is used to execute tests. This is a good place to set default params for all your tests. Example number of threads: params { // run all tests with 1 threads threads = 1 }","title":"tests/nextflow.config"},{"location":"getting-started/","text":"Getting started This guide helps you to understand the concepts of nf-test and to write your first test cases. Before you start, please check if you have installed nf-test properly on your computer. Also, this guide assumes that you have a basic knowledge of Groovy and unit testing. The Groovy documentation is the best place to learn its syntax. Let's get started To show the power of nf-test, we adapted a recently published proof of concept Nextflow pipeline . We adapted the pipeline to the new DSL2 syntax using modules (which is required by nf-test). First, open the terminal and clone our test pipeline: # clone nextflow pipeline git clone https://github.com/askimed/nf-test-examples # enter project directory cd nf-test-examples The pipeline consists of three modules ( salmon.index.nf , salmon_align_quant.nf , fastqc.nf ). Here, we use the salmon.index.nf process to create a test case from scratch. This process takes a reference as an input and creates an index using salmon. Init Before creating test cases, we use the init command to setup nf-test. //Init command has already been executed for our repository nf-test init The init command creates the following files: nf-test.config and tests/nextflow.config . In the configuration section you can learn more about these files and how to customize the directory layout. Create your first test The generate command helps you to create a skeleton test code for a Nextflow process or the complete pipeline/workflow. Here we generate a test case for the process salmon.index.nf : # delete already existing test case rm tests/modules/local/salmon_index.nf.test nf-test generate process modules/local/salmon_index.nf This command creates a new file tests/modules/local/salmon_index.nf with the following content: nextflow_process { name \"Test Process SALMON_INDEX\" script \"modules/local/salmon_index.nf\" process \"SALMON_INDEX\" test ( \"Should run without failures\" ) { when { params { // define parameters here. Example: // outdir = \"tests/results\" } process { \"\"\" // define inputs of the process here. Example: // input[0] = file(\"test-file.txt\") \"\"\" } } then { assert process . success with ( process . out ) { // Make assertions about the content and elements of output channels here. Example: // assert out_channel != null } } } } The generate command filled automatically the name, script and process of our test case as well as created a skeleton for your first test method. Typically you create one file per process and use different test methods to describe the expected behaviour of the process. This test has a name, a when and a then closure (when/then closures are required here, since inputs need to be defined). The when block describes the input parameters of the workflow or the process. nf-test executes the process with exactly these parameters and parses the content of the output channels. Then, it evaluates the assertions defined in the then block to check if content of the output channels matches your expectations. The when block The when block describes the input of the process and/or the Nextflow params . The params block is optional and is a simple map that can be used to override Nextflow's input params . The process block is a multi-line string. The input array can be used to set the different inputs arguments of the process. In our example, we only have one input that expects a file. Let us update the process block by setting the first element of the input array to the path of our reference file: when { params { outdir = \"output\" } process { \"\"\" // Use transcriptome.fa as a first input paramter for our process input[0] = file(\"test_data/transcriptome.fa\") \"\"\" } } Everything which is defined in the process block is later executed in a Nextflow script (created automatically to test your process). Therefore, you can use every Nextflow specific function or command to define the values of the input array (e.g. Channels, files, paths, etc.). The then block The then block describes the expected output channels of the process when we execute it with the input parameters defined in the when block. The then block typically contains mainly assertions to check assumptions (e.g. the size and the content of an output channel). However, this block accepts every Groovy script. This means you can also import third party libraries to define very specific assertions. nf-test automatically loads all output channels of the process and all their items into a map named process.out . You can then use this map to formulate your assertions. For example, in the salmon_index process we expect to get one process executed and 16 files created. But we also want to check the md5 sum and want to look into the actual JSON file. Let us update the then section with some assertions that describe our expectations: then { //check if test case succeeded assert process . success //analyze trace file assert process . trace . tasks (). size () == 1 with ( process . out ) { // check if emitted output has been created assert index . size () == 1 // count amount of created files assert path ( index . get ( 0 )). list (). size () == 16 // parse info.json file using a json parser provided by nf-test def info = path ( index . get ( 0 )+ '/info.json' ). json assert info . num_kmers == 375730 assert info . seq_length == 443050 assert path ( index . get ( 0 )+ '/info.json' ). md5 == \"80831602e2ac825e3e63ba9df5d23505\" } } The items of a channel are always sorted by nf-test. This provides a deterministic order inside the channel and enables you to write reproducible tests. Your first test specification You can update the name of the test method to something that gives us later a good description of our specification. When we put everything together, we get the following full working test specification: nextflow_process { name \"Test Process SALMON_INDEX\" script \"modules/local/salmon_index.nf\" process \"SALMON_INDEX\" test ( \"Should create channel index files\" ) { when { process { \"\"\" input[0] = file(\"test_data/transcriptome.fa\") \"\"\" } } then { //check if test case succeeded assert process . success //analyze trace file assert process . trace . tasks (). size () == 1 with ( process . out ) { // check if emitted output has been created assert index . size () == 1 // count amount of created files assert path ( index . get ( 0 )). list (). size () == 16 // parse info.json file def info = path ( index . get ( 0 )+ '/info.json' ). json assert info . num_kmers == 375730 assert info . seq_length == 443050 assert path ( index . get ( 0 )+ '/info.json' ). md5 == \"80831602e2ac825e3e63ba9df5d23505\" } } } } Run your first test Now, the test command can be used to run your test: nf-test test tests/modules/local/salmon_index.nf.test --profile docker Specifying profiles In this case, the docker profile defined in the Nextflow pipeline is used to execute the test. The profile is set using the --profile parameter, but you can also define a default profile in the configuration file . Congratulations! You created you first nf-test specification. What's next? Learn how to write assertions Learn how to write workflow tests (integration test or e2e) Learn how to config nf-test","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This guide helps you to understand the concepts of nf-test and to write your first test cases. Before you start, please check if you have installed nf-test properly on your computer. Also, this guide assumes that you have a basic knowledge of Groovy and unit testing. The Groovy documentation is the best place to learn its syntax.","title":"Getting started"},{"location":"getting-started/#lets-get-started","text":"To show the power of nf-test, we adapted a recently published proof of concept Nextflow pipeline . We adapted the pipeline to the new DSL2 syntax using modules (which is required by nf-test). First, open the terminal and clone our test pipeline: # clone nextflow pipeline git clone https://github.com/askimed/nf-test-examples # enter project directory cd nf-test-examples The pipeline consists of three modules ( salmon.index.nf , salmon_align_quant.nf , fastqc.nf ). Here, we use the salmon.index.nf process to create a test case from scratch. This process takes a reference as an input and creates an index using salmon.","title":"Let's get started"},{"location":"getting-started/#init","text":"Before creating test cases, we use the init command to setup nf-test. //Init command has already been executed for our repository nf-test init The init command creates the following files: nf-test.config and tests/nextflow.config . In the configuration section you can learn more about these files and how to customize the directory layout.","title":"Init"},{"location":"getting-started/#create-your-first-test","text":"The generate command helps you to create a skeleton test code for a Nextflow process or the complete pipeline/workflow. Here we generate a test case for the process salmon.index.nf : # delete already existing test case rm tests/modules/local/salmon_index.nf.test nf-test generate process modules/local/salmon_index.nf This command creates a new file tests/modules/local/salmon_index.nf with the following content: nextflow_process { name \"Test Process SALMON_INDEX\" script \"modules/local/salmon_index.nf\" process \"SALMON_INDEX\" test ( \"Should run without failures\" ) { when { params { // define parameters here. Example: // outdir = \"tests/results\" } process { \"\"\" // define inputs of the process here. Example: // input[0] = file(\"test-file.txt\") \"\"\" } } then { assert process . success with ( process . out ) { // Make assertions about the content and elements of output channels here. Example: // assert out_channel != null } } } } The generate command filled automatically the name, script and process of our test case as well as created a skeleton for your first test method. Typically you create one file per process and use different test methods to describe the expected behaviour of the process. This test has a name, a when and a then closure (when/then closures are required here, since inputs need to be defined). The when block describes the input parameters of the workflow or the process. nf-test executes the process with exactly these parameters and parses the content of the output channels. Then, it evaluates the assertions defined in the then block to check if content of the output channels matches your expectations.","title":"Create your first test"},{"location":"getting-started/#the-when-block","text":"The when block describes the input of the process and/or the Nextflow params . The params block is optional and is a simple map that can be used to override Nextflow's input params . The process block is a multi-line string. The input array can be used to set the different inputs arguments of the process. In our example, we only have one input that expects a file. Let us update the process block by setting the first element of the input array to the path of our reference file: when { params { outdir = \"output\" } process { \"\"\" // Use transcriptome.fa as a first input paramter for our process input[0] = file(\"test_data/transcriptome.fa\") \"\"\" } } Everything which is defined in the process block is later executed in a Nextflow script (created automatically to test your process). Therefore, you can use every Nextflow specific function or command to define the values of the input array (e.g. Channels, files, paths, etc.).","title":"The when block"},{"location":"getting-started/#the-then-block","text":"The then block describes the expected output channels of the process when we execute it with the input parameters defined in the when block. The then block typically contains mainly assertions to check assumptions (e.g. the size and the content of an output channel). However, this block accepts every Groovy script. This means you can also import third party libraries to define very specific assertions. nf-test automatically loads all output channels of the process and all their items into a map named process.out . You can then use this map to formulate your assertions. For example, in the salmon_index process we expect to get one process executed and 16 files created. But we also want to check the md5 sum and want to look into the actual JSON file. Let us update the then section with some assertions that describe our expectations: then { //check if test case succeeded assert process . success //analyze trace file assert process . trace . tasks (). size () == 1 with ( process . out ) { // check if emitted output has been created assert index . size () == 1 // count amount of created files assert path ( index . get ( 0 )). list (). size () == 16 // parse info.json file using a json parser provided by nf-test def info = path ( index . get ( 0 )+ '/info.json' ). json assert info . num_kmers == 375730 assert info . seq_length == 443050 assert path ( index . get ( 0 )+ '/info.json' ). md5 == \"80831602e2ac825e3e63ba9df5d23505\" } } The items of a channel are always sorted by nf-test. This provides a deterministic order inside the channel and enables you to write reproducible tests.","title":"The then block"},{"location":"getting-started/#your-first-test-specification","text":"You can update the name of the test method to something that gives us later a good description of our specification. When we put everything together, we get the following full working test specification: nextflow_process { name \"Test Process SALMON_INDEX\" script \"modules/local/salmon_index.nf\" process \"SALMON_INDEX\" test ( \"Should create channel index files\" ) { when { process { \"\"\" input[0] = file(\"test_data/transcriptome.fa\") \"\"\" } } then { //check if test case succeeded assert process . success //analyze trace file assert process . trace . tasks (). size () == 1 with ( process . out ) { // check if emitted output has been created assert index . size () == 1 // count amount of created files assert path ( index . get ( 0 )). list (). size () == 16 // parse info.json file def info = path ( index . get ( 0 )+ '/info.json' ). json assert info . num_kmers == 375730 assert info . seq_length == 443050 assert path ( index . get ( 0 )+ '/info.json' ). md5 == \"80831602e2ac825e3e63ba9df5d23505\" } } } }","title":"Your first test specification"},{"location":"getting-started/#run-your-first-test","text":"Now, the test command can be used to run your test: nf-test test tests/modules/local/salmon_index.nf.test --profile docker","title":"Run your first test"},{"location":"getting-started/#specifying-profiles","text":"In this case, the docker profile defined in the Nextflow pipeline is used to execute the test. The profile is set using the --profile parameter, but you can also define a default profile in the configuration file . Congratulations! You created you first nf-test specification.","title":"Specifying profiles"},{"location":"getting-started/#whats-next","text":"Learn how to write assertions Learn how to write workflow tests (integration test or e2e) Learn how to config nf-test","title":"What's next?"},{"location":"installation/","text":"Installation nf-test has the same requirements as Nextflow and can be used on POSIX compatible systems like Linux or OS X. You can install nf-test using the following command: curl -fsSL https://code.askimed.com/install/nf-test | bash If you don't have curl installed, you could use wget: wget -qO- https://code.askimed.com/install/nf-test | bash It will create the nf-test executable file in the current directory. Optionally, move the nf-test file to a directory accessible by your $PATH variable. Test the installation with the following command: nf-test version You should see something like this: \ud83d\ude80\u001b nf-test 0.4.0 https://code.askimed.com/nf-test (c) 2021 Lukas Forer and Sebastian Schoenherr Nextflow Runtime: N E X T F L O W version 21.04.3 build 5560 created 21-07-2021 15:09 UTC (17:09 CEST) cite doi:10.1038/nbt.3820 http://nextflow.io Now you are ready to write your first testcase . Nextflow Binary not found If you get an error message like this, then nf-test was not able to detect your Nextflow installation. \ud83d\ude80\u001b nf-test 0.4.0 https://code.askimed.com/nf-test (c) 2021 Lukas Forer and Sebastian Schoenherr Nextflow Runtime: Error: Nextflow Binary not found. Please check if Nextflow is in a directory accessible by your $PATH variable or set $NEXTFLOW_HOME. To solve this issue you have two possibilites: Move your Nextflow binary to a directory accessible by your $PATH variable. Set the environment variable NEXTFLOW_HOME to the directory that contains the Nextflow binary. Updating To update an existing nf-test installtion to the latest version, run the following command: nf-test update Manual installation All releases are also available on Github .","title":"Installation"},{"location":"installation/#installation","text":"nf-test has the same requirements as Nextflow and can be used on POSIX compatible systems like Linux or OS X. You can install nf-test using the following command: curl -fsSL https://code.askimed.com/install/nf-test | bash If you don't have curl installed, you could use wget: wget -qO- https://code.askimed.com/install/nf-test | bash It will create the nf-test executable file in the current directory. Optionally, move the nf-test file to a directory accessible by your $PATH variable. Test the installation with the following command: nf-test version You should see something like this: \ud83d\ude80\u001b nf-test 0.4.0 https://code.askimed.com/nf-test (c) 2021 Lukas Forer and Sebastian Schoenherr Nextflow Runtime: N E X T F L O W version 21.04.3 build 5560 created 21-07-2021 15:09 UTC (17:09 CEST) cite doi:10.1038/nbt.3820 http://nextflow.io Now you are ready to write your first testcase .","title":"Installation"},{"location":"installation/#nextflow-binary-not-found","text":"If you get an error message like this, then nf-test was not able to detect your Nextflow installation. \ud83d\ude80\u001b nf-test 0.4.0 https://code.askimed.com/nf-test (c) 2021 Lukas Forer and Sebastian Schoenherr Nextflow Runtime: Error: Nextflow Binary not found. Please check if Nextflow is in a directory accessible by your $PATH variable or set $NEXTFLOW_HOME. To solve this issue you have two possibilites: Move your Nextflow binary to a directory accessible by your $PATH variable. Set the environment variable NEXTFLOW_HOME to the directory that contains the Nextflow binary.","title":"Nextflow Binary not found"},{"location":"installation/#updating","text":"To update an existing nf-test installtion to the latest version, run the following command: nf-test update","title":"Updating"},{"location":"installation/#manual-installation","text":"All releases are also available on Github .","title":"Manual installation"},{"location":"nftest_pipelines/","text":"Pipelines using nf-test nf-test-examples All test cases described in this documentation can be found in the nf-test-examples repository . GWAS-Regenie Pipeline To show the power of nf-test, we applied nf-test to a Nextflow pipeline that performs whole genome regression modelling using regenie. Please click here to learn more about this pipeline and checkout different kind of test cases.","title":"nf-test Pipelines"},{"location":"nftest_pipelines/#pipelines-using-nf-test","text":"","title":"Pipelines using nf-test"},{"location":"nftest_pipelines/#nf-test-examples","text":"All test cases described in this documentation can be found in the nf-test-examples repository .","title":"nf-test-examples"},{"location":"nftest_pipelines/#gwas-regenie-pipeline","text":"To show the power of nf-test, we applied nf-test to a Nextflow pipeline that performs whole genome regression modelling using regenie. Please click here to learn more about this pipeline and checkout different kind of test cases.","title":"GWAS-Regenie Pipeline"},{"location":"assertions/assertions/","text":"Assertions Writing test cases means formulating assumptions by using assertions. Groovy\u2019s power assert provides a detailed output when the boolean expression validates to false. nf-test provides several extensions and commands to simplify the work with Nextflow channels. Using with This assertions... assert process . out . imputed_plink2 assert process . out . imputed_plink2 . size () == 1 assert process . out . imputed_plink2 . get ( 0 ). get ( 0 ) == \"example.vcf\" assert process . out . imputed_plink2 . get ( 0 ). get ( 1 ) ==~ \".*/example.vcf.pgen\" assert process . out . imputed_plink2 . get ( 0 ). get ( 2 ) ==~ \".*/example.vcf.psam\" assert process . out . imputed_plink2 . get ( 0 ). get ( 3 ) ==~ \".*/example.vcf.pvar\" ... can be written by using with(){} to improve readability: assert process . out . imputed_plink2 with ( process . out . imputed_plink2 ) { assert size () == 1 with ( get ( 0 )) { assert get ( 0 ) == \"example.vcf\" assert get ( 1 ) ==~ \".*/example.vcf.pgen\" assert get ( 2 ) ==~ \".*/example.vcf.psam\" assert get ( 3 ) ==~ \".*/example.vcf.pvar\" } }","title":"Power Assertions"},{"location":"assertions/assertions/#assertions","text":"Writing test cases means formulating assumptions by using assertions. Groovy\u2019s power assert provides a detailed output when the boolean expression validates to false. nf-test provides several extensions and commands to simplify the work with Nextflow channels.","title":"Assertions"},{"location":"assertions/assertions/#using-with","text":"This assertions... assert process . out . imputed_plink2 assert process . out . imputed_plink2 . size () == 1 assert process . out . imputed_plink2 . get ( 0 ). get ( 0 ) == \"example.vcf\" assert process . out . imputed_plink2 . get ( 0 ). get ( 1 ) ==~ \".*/example.vcf.pgen\" assert process . out . imputed_plink2 . get ( 0 ). get ( 2 ) ==~ \".*/example.vcf.psam\" assert process . out . imputed_plink2 . get ( 0 ). get ( 3 ) ==~ \".*/example.vcf.pvar\" ... can be written by using with(){} to improve readability: assert process . out . imputed_plink2 with ( process . out . imputed_plink2 ) { assert size () == 1 with ( get ( 0 )) { assert get ( 0 ) == \"example.vcf\" assert get ( 1 ) ==~ \".*/example.vcf.pgen\" assert get ( 2 ) ==~ \".*/example.vcf.psam\" assert get ( 3 ) ==~ \".*/example.vcf.pvar\" } }","title":"Using with"},{"location":"assertions/files/","text":"Files md5 Checksum nf-test extends path by a md5 property that can be used to compare the file content with an expected checksum: assert path ( process . out . out_ch . get ( 0 )). md5 == \"64debea5017a035ddc67c0b51fa84b16\" JSON Files nf-test extends path by a json property that can be used to read json files: assert path ( process . out . out_ch . get ( 0 )). json . key == \"value\" GZip Files nf-test extends path by a linesGzip property that can be used to read gzip compressed files: assert path ( process . out . out_ch . get ( 0 )). linesGzip . size == 5 assert path ( process . out . out_ch . get ( 0 )). linesGzip . contains ( \"Line Content\" )","title":"Files"},{"location":"assertions/files/#files","text":"","title":"Files"},{"location":"assertions/files/#md5-checksum","text":"nf-test extends path by a md5 property that can be used to compare the file content with an expected checksum: assert path ( process . out . out_ch . get ( 0 )). md5 == \"64debea5017a035ddc67c0b51fa84b16\"","title":"md5 Checksum"},{"location":"assertions/files/#json-files","text":"nf-test extends path by a json property that can be used to read json files: assert path ( process . out . out_ch . get ( 0 )). json . key == \"value\"","title":"JSON Files"},{"location":"assertions/files/#gzip-files","text":"nf-test extends path by a linesGzip property that can be used to read gzip compressed files: assert path ( process . out . out_ch . get ( 0 )). linesGzip . size == 5 assert path ( process . out . out_ch . get ( 0 )). linesGzip . contains ( \"Line Content\" )","title":"GZip Files"},{"location":"assertions/libraries/","text":"Using Third-Party Libraries nf-test supports the @Grab annotation to include third-party libraries (available as maven artifacts) in test scripts. Example @Grab ( group = 'commons-lang' , module = 'commons-lang' , version = '2.4' ) import org.apache.commons.lang.WordUtils nextflow_process { name \"Test Process TEST_PROCESS\" script \"test-data/test_process.nf\" process \"TEST_PROCESS\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } process { \"\"\" input[0] = file(\"test-file.txt\") \"\"\" } } then { assert process . success assert process . out . out_channel . get ( 0 ) == WordUtils . capitalize ( 'world' ) } } }","title":"Using Third-Party Libraries"},{"location":"assertions/libraries/#using-third-party-libraries","text":"nf-test supports the @Grab annotation to include third-party libraries (available as maven artifacts) in test scripts.","title":"Using Third-Party Libraries"},{"location":"assertions/libraries/#example","text":"@Grab ( group = 'commons-lang' , module = 'commons-lang' , version = '2.4' ) import org.apache.commons.lang.WordUtils nextflow_process { name \"Test Process TEST_PROCESS\" script \"test-data/test_process.nf\" process \"TEST_PROCESS\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } process { \"\"\" input[0] = file(\"test-file.txt\") \"\"\" } } then { assert process . success assert process . out . out_channel . get ( 0 ) == WordUtils . capitalize ( 'world' ) } } }","title":"Example"},{"location":"assertions/regular-expressions/","text":"Regular Expressions Using ==~ operator The operator ==~ can be used to check if a string matches a regular expression: assert \"/my/full/path/to/process/dir/example.vcf.pgen\" ==~ \".*/example.vcf.pgen\"","title":"Regular Expressions"},{"location":"assertions/regular-expressions/#regular-expressions","text":"","title":"Regular Expressions"},{"location":"assertions/regular-expressions/#using-operator","text":"The operator ==~ can be used to check if a string matches a regular expression: assert \"/my/full/path/to/process/dir/example.vcf.pgen\" ==~ \".*/example.vcf.pgen\"","title":"Using ==~ operator"},{"location":"cli/generate/","text":"generate command Usage nf-test generate <TEST_CASE_TYPE> <NEXTFLOW_FILES> Supported Types process workflow pipeline Examples Create a test case for a process: nf-test generate process modules/local/salmon_index.nf Create a test cases for all processes in folder modules : nf-test generate process modules/**/*.nf Create a test case for a sub workflow: nf-test generate workflow workflows/some_workflow.nf Create a test case for the whole pipeline: nf-test generate pipeline main.nf","title":"generate"},{"location":"cli/generate/#generate-command","text":"","title":"generate command"},{"location":"cli/generate/#usage","text":"nf-test generate <TEST_CASE_TYPE> <NEXTFLOW_FILES>","title":"Usage"},{"location":"cli/generate/#supported-types","text":"","title":"Supported Types"},{"location":"cli/generate/#process","text":"","title":"process"},{"location":"cli/generate/#workflow","text":"","title":"workflow"},{"location":"cli/generate/#pipeline","text":"","title":"pipeline"},{"location":"cli/generate/#examples","text":"Create a test case for a process: nf-test generate process modules/local/salmon_index.nf Create a test cases for all processes in folder modules : nf-test generate process modules/**/*.nf Create a test case for a sub workflow: nf-test generate workflow workflows/some_workflow.nf Create a test case for the whole pipeline: nf-test generate pipeline main.nf","title":"Examples"},{"location":"cli/init/","text":"init command Usage nf-test init The init command set ups nf-test in the current directory. The init command creates the following files: nf-test.config and tests/nextflow.config . It also creates a folder tests which is the home directory of your test code. In the configuration section you can learn more about these files and how to customize the directory layout.","title":"init"},{"location":"cli/init/#init-command","text":"","title":"init command"},{"location":"cli/init/#usage","text":"nf-test init The init command set ups nf-test in the current directory. The init command creates the following files: nf-test.config and tests/nextflow.config . It also creates a folder tests which is the home directory of your test code. In the configuration section you can learn more about these files and how to customize the directory layout.","title":"Usage"},{"location":"cli/test/","text":"test command Usage nf-test test [<NEXTFLOW_FILES>] Optional Arguements --profile <NEXTFLOW_PROFILE> --debug The debug parameter prints out all available output channels which can be accessed in the then clause. Examples Run all tests: nf-test test Run all test from a *.test file: nf-test test tests/modules/local/salmon_index.nf.test Run a specific test using its hash: nf-test test tests/main.nf.test@d41119e4","title":"test"},{"location":"cli/test/#test-command","text":"","title":"test command"},{"location":"cli/test/#usage","text":"nf-test test [<NEXTFLOW_FILES>]","title":"Usage"},{"location":"cli/test/#optional-arguements","text":"","title":"Optional Arguements"},{"location":"cli/test/#-profile-nextflow_profile","text":"","title":"--profile &lt;NEXTFLOW_PROFILE&gt;"},{"location":"cli/test/#-debug","text":"The debug parameter prints out all available output channels which can be accessed in the then clause.","title":"--debug"},{"location":"cli/test/#examples","text":"Run all tests: nf-test test Run all test from a *.test file: nf-test test tests/modules/local/salmon_index.nf.test Run a specific test using its hash: nf-test test tests/main.nf.test@d41119e4","title":"Examples"},{"location":"testcases/nextflow_pipeline/","text":"Pipeline Testing nf-test also allows to test the complete pipeline end-to-end. Please checkout the CLI to generate a pipeline test. Syntax nextflow_pipeline { name \"<NAME>\" script \"<PATH/TO/NEXTFLOW_SCRIPT.nf>\" test ( \"<TEST_NAME>\" ) { } } Assertions The workflow object can be used in asserts to check its status, error messages or traces. // workflow status assert workflow . success assert workflow . failed assert workflow . exitStatus == 0 // workflow error message assert workflow . errorReport . contains ( \"....\" ) // trace //returns a list containing succeeded tasks assert workflow . trace . succeeded (). size () == 3 //returns a list containing failed tasks assert workflow . trace . failed (). size () == 0 //returns a list containing all tasks assert workflow . trace . tasks (). size () == 3 Example nextflow_pipeline { name \"Test Workflow test1.nf\" script \"test-data/test1.nf\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } } then { assert workflow . success assert path ( \"tests/results/output.txt\" ). exists () } } }","title":"Pipeline Testing"},{"location":"testcases/nextflow_pipeline/#pipeline-testing","text":"nf-test also allows to test the complete pipeline end-to-end. Please checkout the CLI to generate a pipeline test.","title":"Pipeline Testing"},{"location":"testcases/nextflow_pipeline/#syntax","text":"nextflow_pipeline { name \"<NAME>\" script \"<PATH/TO/NEXTFLOW_SCRIPT.nf>\" test ( \"<TEST_NAME>\" ) { } }","title":"Syntax"},{"location":"testcases/nextflow_pipeline/#assertions","text":"The workflow object can be used in asserts to check its status, error messages or traces. // workflow status assert workflow . success assert workflow . failed assert workflow . exitStatus == 0 // workflow error message assert workflow . errorReport . contains ( \"....\" ) // trace //returns a list containing succeeded tasks assert workflow . trace . succeeded (). size () == 3 //returns a list containing failed tasks assert workflow . trace . failed (). size () == 0 //returns a list containing all tasks assert workflow . trace . tasks (). size () == 3","title":"Assertions"},{"location":"testcases/nextflow_pipeline/#example","text":"nextflow_pipeline { name \"Test Workflow test1.nf\" script \"test-data/test1.nf\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } } then { assert workflow . success assert path ( \"tests/results/output.txt\" ). exists () } } }","title":"Example"},{"location":"testcases/nextflow_process/","text":"Process Testing nf-test allows to test each process defined in a module file. Please checkout the CLI to generate a process test. Syntax nextflow_process { name \"<NAME>\" script \"<PATH/TO/NEXTFLOW_SCRIPT.nf>\" process \"<PROCESS_NAME>\" test ( \"<TEST_NAME>\" ) { } } Assertions // trace assert process.trace.tasks().size() == 1 Process The process object can be used in asserts to check its status or error messages. // process status assert process . success assert process . failed assert process . exitStatus == 0 // process error message assert process . errorReport . contains ( \"....\" ) //returns a list containing all lines from stdout assert process . stdout . contains ( \"Hello World\" ) == 3 Output Channels The process.out object provides access to the content of all named output Channels (see Nextflow emit ): // channel exists assert process . out . my_channel != null // channel contains 3 elements assert process . out . my_channel . size () == 4 // first element is \"hello\" assert process . out . my_channel . get ( 0 ) == \"hello\" Example nextflow_process { name \"Test Process TEST_PROCESS\" script \"test-data/test_process.nf\" process \"TEST_PROCESS\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } process { \"\"\" input[0] = file(\"test-file.txt\") \"\"\" } } then { assert process . success assert process . out . out_channel != null } } }","title":"Process Testing"},{"location":"testcases/nextflow_process/#process-testing","text":"nf-test allows to test each process defined in a module file. Please checkout the CLI to generate a process test.","title":"Process Testing"},{"location":"testcases/nextflow_process/#syntax","text":"nextflow_process { name \"<NAME>\" script \"<PATH/TO/NEXTFLOW_SCRIPT.nf>\" process \"<PROCESS_NAME>\" test ( \"<TEST_NAME>\" ) { } }","title":"Syntax"},{"location":"testcases/nextflow_process/#assertions","text":"// trace assert process.trace.tasks().size() == 1","title":"Assertions"},{"location":"testcases/nextflow_process/#process","text":"The process object can be used in asserts to check its status or error messages. // process status assert process . success assert process . failed assert process . exitStatus == 0 // process error message assert process . errorReport . contains ( \"....\" ) //returns a list containing all lines from stdout assert process . stdout . contains ( \"Hello World\" ) == 3","title":"Process"},{"location":"testcases/nextflow_process/#output-channels","text":"The process.out object provides access to the content of all named output Channels (see Nextflow emit ): // channel exists assert process . out . my_channel != null // channel contains 3 elements assert process . out . my_channel . size () == 4 // first element is \"hello\" assert process . out . my_channel . get ( 0 ) == \"hello\"","title":"Output Channels"},{"location":"testcases/nextflow_process/#example","text":"nextflow_process { name \"Test Process TEST_PROCESS\" script \"test-data/test_process.nf\" process \"TEST_PROCESS\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } process { \"\"\" input[0] = file(\"test-file.txt\") \"\"\" } } then { assert process . success assert process . out . out_channel != null } } }","title":"Example"},{"location":"testcases/nextflow_workflow/","text":"Workflow Testing nf-test also allows to test a specific workflow. Please checkout the CLI to generate a workflow test. Syntax nextflow_workflow { name \"<NAME>\" script \"<PATH/TO/NEXTFLOW_SCRIPT.nf>\" workflow \"<WORKFLOW_NAME>\" test ( \"<TEST_NAME>\" ) { } } Assertions The workflow object can be used in asserts to check its status, error messages or traces. // workflow status assert workflow . success assert workflow . failed assert workflow . exitStatus == 0 // workflow error message assert workflow . errorReport . contains ( \"....\" ) // trace //returns a list containing succeeded tasks assert workflow . trace . succeeded (). size () == 3 //returns a list containing failed tasks assert workflow . trace . failed (). size () == 0 //returns a list containing all tasks assert workflow . trace . tasks (). size () == 3 //returns a list containing all lines from stdout assert workflow . stdout . contains ( \"Hello World\" ) == 3 Example nextflow_workflow { name \"Test Workflow TEST_WORKFLOW\" script \"test-data/test_workflow.nf\" workflow \"TEST_WORKFLOW\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } workflow { \"\"\" input[0] = file(\"test-file.txt\") \"\"\" } } then { assert workflow . success assert path ( \"tests/results/output.txt\" ). exists () } } }","title":"Workflow Testing"},{"location":"testcases/nextflow_workflow/#workflow-testing","text":"nf-test also allows to test a specific workflow. Please checkout the CLI to generate a workflow test.","title":"Workflow Testing"},{"location":"testcases/nextflow_workflow/#syntax","text":"nextflow_workflow { name \"<NAME>\" script \"<PATH/TO/NEXTFLOW_SCRIPT.nf>\" workflow \"<WORKFLOW_NAME>\" test ( \"<TEST_NAME>\" ) { } }","title":"Syntax"},{"location":"testcases/nextflow_workflow/#assertions","text":"The workflow object can be used in asserts to check its status, error messages or traces. // workflow status assert workflow . success assert workflow . failed assert workflow . exitStatus == 0 // workflow error message assert workflow . errorReport . contains ( \"....\" ) // trace //returns a list containing succeeded tasks assert workflow . trace . succeeded (). size () == 3 //returns a list containing failed tasks assert workflow . trace . failed (). size () == 0 //returns a list containing all tasks assert workflow . trace . tasks (). size () == 3 //returns a list containing all lines from stdout assert workflow . stdout . contains ( \"Hello World\" ) == 3","title":"Assertions"},{"location":"testcases/nextflow_workflow/#example","text":"nextflow_workflow { name \"Test Workflow TEST_WORKFLOW\" script \"test-data/test_workflow.nf\" workflow \"TEST_WORKFLOW\" test ( \"Should run without failures\" ) { when { params { outdir = \"tests/results\" } workflow { \"\"\" input[0] = file(\"test-file.txt\") \"\"\" } } then { assert workflow . success assert path ( \"tests/results/output.txt\" ). exists () } } }","title":"Example"}]}